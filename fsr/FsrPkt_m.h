

#ifndef __INET__INETMANET_FSRPKT_M_H
#define __INET__INETMANET_FSRPKT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0601
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {
namespace inetmanet {

class FsrPkt;

}  // namespace inetmanet
}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address

#include "inet/routing/extras/fsr/FsrMsg_m.h" // import inet.routing.extras.fsr.FsrMsg


namespace inet {
namespace inetmanet {

/**
 * Class generated from <tt>inet/routing/extras/fsr/FsrPkt.msg:44</tt> by opp_msgtool.
 * <pre>
 * class FsrPkt extends FieldsChunk
 * {
 *     \@omitGetVerb(true);
 *     \@fieldNameSuffix("_var");
 *     bool reduceFuncionality = false;
 *     short pkt_seq_num;          ///< Packet sequence number.
 *     long sn;                    /// CapProbe packet sequence number
 *     double send_time;           /// Packet sending timestamp
 *     FsrMsg msg[];             ///< Packet body.
 * }
 * </pre>
 */
class INET_API FsrPkt : public ::inet::FieldsChunk
{
  protected:
    bool reduceFuncionality_var = false;
    short pkt_seq_num_var = 0;
    long sn_var = 0;
    double send_time_var = 0;
    FsrMsg *msg_var = nullptr;
    size_t msg_arraysize = 0;

  private:
    void copy(const FsrPkt& other);

  protected:
    bool operator==(const FsrPkt&) = delete;

  public:
    FsrPkt();
    FsrPkt(const FsrPkt& other);
    virtual ~FsrPkt();
    FsrPkt& operator=(const FsrPkt& other);
    virtual FsrPkt *dup() const override {return new FsrPkt(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool reduceFuncionality() const;
    virtual void setReduceFuncionality(bool reduceFuncionality);

    virtual short pkt_seq_num() const;
    virtual void setPkt_seq_num(short pkt_seq_num);

    virtual long sn() const;
    virtual void setSn(long sn);

    virtual double send_time() const;
    virtual void setSend_time(double send_time);

    virtual void setMsgArraySize(size_t size);
    virtual size_t msgArraySize() const;
    virtual const FsrMsg& msg(size_t k) const;
    virtual FsrMsg& getMsgForUpdate(size_t k) { handleChange();return const_cast<FsrMsg&>(const_cast<FsrPkt*>(this)->msg(k));}
    virtual void setMsg(size_t k, const FsrMsg& msg);
    virtual void insertMsg(size_t k, const FsrMsg& msg);
    [[deprecated]] void insertMsg(const FsrMsg& msg) {appendMsg(msg);}
    virtual void appendMsg(const FsrMsg& msg);
    virtual void eraseMsg(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FsrPkt& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FsrPkt& obj) {obj.parsimUnpack(b);}


}  // namespace inetmanet
}  // namespace inet


namespace omnetpp {

template<> inline inet::inetmanet::FsrPkt *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::inetmanet::FsrPkt*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET__INETMANET_FSRPKT_M_H

